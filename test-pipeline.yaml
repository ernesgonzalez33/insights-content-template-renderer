apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: bonfire
  labels:
    build.appstudio.redhat.com/pipeline: "bonfire"
spec:
  params:
    - name: SNAPSHOT
      type: string
      description: |
        Spec section of an ApplicationSnapshot resource. Not all fields of the
        resource are required. A minimal example:
          {
            "components": [
              {
                "containerImage": "quay.io/example/repo:latest"
              }
            ]
          }
        Each "containerImage" in the "components" array is validated.
  results:
    - name: TEST_OUTPUT
      value: "$(tasks.run-test.results.TEST_OUTPUT)"
      description: ""
  tasks:
    - name: run-test
      params:
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
      taskSpec:
          params:
            - name: SNAPSHOT
              type: string
              description: "AppStudio snapshot (see example above)"
            - name: APP_INTERFACE_SECRET
              type: string
              default: app-interface
              description: "Secret for connecting to app-interface"
          results:
            - name: TEST_OUTPUT
              description: ""
          steps:
            - name: run-test
              image: registry.access.redhat.com/ubi9/python-39:latest
              env:
                - name: APP_INTERFACE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: $(params.APP_INTERFACE_SECRET)
                      key: username
                - name: APP_INTERFACE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: $(params.APP_INTERFACE_SECRET)
                      key: password
                - name: APP_INTERFACE_BASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: $(params.APP_INTERFACE_SECRET)
                      key: baseurl
              script: |
                #!/bin/bash
                set -ex
                echo "$(params.SNAPSHOT)"
                echo "$(params.SNAPSHOT)" > $(results.TEST_OUTPUT.path)

                APP_NAME="ccx-data-pipeline"  # name of app-sre "application" folder this component lives in
                COMPONENT_NAME="insights-content-template-renderer"  # name of app-sre "resourceTemplate" in deploy.yaml for this component

                COMPONENTS="insights-content-template-renderer"  # space-separated list of components to laod
                COMPONENTS_W_RESOURCES="insights-content-template-renderer"  # component to keep
                # CACHE_FROM_LATEST_IMAGE="true"

                export IQE_PLUGINS="ccx"
                export IQE_MARKER_EXPRESSION=""
                # Workaround: There are no specific integration tests. Check that the service loads and iqe plugin works.
                export IQE_FILTER_EXPRESSION="test_plugin_accessible"
                export IQE_REQUIREMENTS_PRIORITY=""
                export IQE_TEST_IMPORTANCE=""
                export IQE_CJI_TIMEOUT="30m"


                function build_image() {
                    source $CICD_ROOT/build.sh
                }

                function deploy_ephemeral() {
                    source $CICD_ROOT/deploy_ephemeral_env.sh
                }

                function run_smoke_tests() {
                    # component name needs to be re-export to match ClowdApp name (as bonfire requires for this)
                    
                    # TODO: Uncomment when there are any tests
                    # export COMPONENT_NAME="insights-content-template-renderer"
                    # source $CICD_ROOT/cji_smoke_test.sh
                    echo "To be implemented"
                }

                export SKIP_REGISTRY_LOGIN=true
                export CICD_REPO_ORG=gbenhaim

                # Install bonfire repo/initialize
                CICD_URL=https://raw.githubusercontent.com/RedHatInsights/bonfire/master/cicd
                curl -s $CICD_URL/bootstrap.sh > .cicd_bootstrap.sh && source .cicd_bootstrap.sh
                
                # echo "creating PR image"
                # build_image

                echo "deploying to ephemeral"

                # Override with values from the appstudio snapshot
                export IMAGE="quay.io/cloudservices/insights-content-template-renderer"
                export IMAGE_TAG=""

                deploy_ephemeral

                echo "running PR smoke tests"
                run_smoke_tests
